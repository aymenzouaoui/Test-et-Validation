openapi: 3.0.0
info:
  title: CrossChat API documentation
  version: 1.0.0
  description: CrossChat API documentation using Swagger
paths:
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to delete
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
  /section:
    get:
      tags:
        - Sections
      summary: Get all sections
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
    post:
      tags:
        - Sections
      summary: Create a new section
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
      responses:
        201:
          description: Section created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
  /section/{sectionId}:
    get:
      tags:
        - Sections
      summary: Get a section by ID
      parameters:
        - in: path
          name: sectionId
          required: true
          description: ID of the section to retrieve
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        404:
          description: Section not found
    put:
      tags:
        - Sections
      summary: Update a section by ID
      parameters:
        - in: path
          name: sectionId
          required: true
          description: ID of the section to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
      responses:
        200:
          description: Section updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        404:
          description: Section not found
    delete:
      tags:
        - Sections
      summary: Delete a section by ID
      parameters:
        - in: path
          name: sectionId
          required: true
          description: ID of the section to delete
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Section deleted successfully
        404:
          description: Section not found
  /messages:
    get:
      tags:
        - Messages
      summary: Get all messages
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - Messages
      summary: Create a new message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        201:
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/{messageId}:
    get:
      tags:
        - Messages
      summary: Get a message by ID
      parameters:
        - in: path
          name: messageId
          required: true
          description: ID of the message to retrieve
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        404:
          description: Message not found
    put:
      tags:
        - Messages
      summary: Update a message by ID
      parameters:
        - in: path
          name: messageId
          required: true
          description: ID of the message to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: Message updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        404:
          description: Message not found
    delete:
      tags:
        - Messages
      summary: Delete a message by ID
      parameters:
        - in: path
          name: messageId
          required: true
          description: ID of the message to delete
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Message deleted successfully
        404:
          description: Message not found
  /groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
        - Groups
      summary: Create a new group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        201:
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get a group by ID
      parameters:
        - in: path
          name: groupId
          required: true
          description: ID of the group to retrieve
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: Group not found
    put:
      tags:
        - Groups
      summary: Update a group by ID
      parameters:
        - in: path
          name: groupId
          required: true
          description: ID of the group to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: Group not found
    delete:
      tags:
        - Groups
      summary: Delete a group by ID
      parameters:
        - in: path
          name: groupId
          required: true
          description: ID of the group to delete
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Group deleted successfully
        404:
          description: Group not found
  /category:
    get:
      tags:
        - Category
      summary: Get all categories
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - Category
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /category/{categoryId}:
    get:
      tags:
        - Category
      summary: Get a category by ID
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category to retrieve
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Category not found
    put:
      tags:
        - Categoryr
      summary: Update a category by ID
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category to update
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Category not found
    delete:
      tags:
        - Category
      summary: Delete a category by ID
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category to delete
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Category deleted successfully
        404:
          description: Category not found
  /attachments:
    post:
      tags:
        - Attachments
      summary: Create a new attachment
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
      responses:
        201:
          description: Attachment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
  /attachments/{attachmentId}:
    delete:
      tags:
        - Attachments
      summary: Delete an attachment by ID
      parameters:
        - in: path
          name: attachmentId
          required: true
          description: ID of the attachment to delete
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Attachment deleted successfully
        404:
          description: Attachment not found
  /applications:
    post:
      tags:
        - Applications
      summary: Create a new application
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        201:
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
  /applications/{applicationId}:
    get:
      tags:
        - Applications
      summary: Get an application by ID
      parameters:
        - in: path
          name: applicationId
          required: true
          description: ID of the application to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        404:
          description: Application not found
    put:
      tags:
        - Applications
      summary: Update an application by ID
      parameters:
        - in: path
          name: applicationId
          required: true
          description: ID of the application to update
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        200:
          description: Application updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        404:
          description: Application not found
    delete:
      tags:
        - Applications
      summary: Delete an application by ID
      parameters:
        - in: path
          name: applicationId
          required: true
          description: ID of the application to delete
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Application deleted successfully
        404:
          description: Application not found
  /conversations:
    post:
      tags:
        - Conversation
      summary: Create a new conversation
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        201:
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
  /conversations/{conversationId}:
    get:
      tags:
        - Conversation
      summary: Get a conversation by ID
      parameters:
        - in: path
          name: conversationId
          required: true
          description: ID of the conversation to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        404:
          description: Conversation not found
    put:
      tags:
        - Conversation
      summary: Update a conversation by ID
      parameters:
        - in: path
          name: conversationId
          required: true
          description: ID of the conversation to update
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
      responses:
        200:
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        404:
          description: Conversation not found
    delete:
      tags:
        - Conversation
      summary: Delete a conversation by ID
      parameters:
        - in: path
          name: conversationId
          required: true
          description: ID of the conversation to delete
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Conversation deleted successfully
        404:
          description: Conversation not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        refreshToken:
          type: string
        phone:
          type: string
        avatar:
          type: string
        isBanned:
          type: boolean
        role:
          type: string
          enum:
            - admin
            - user
    Section:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        colorLine:
          type: boolean
        codeBox:
          type: boolean
    Message:
      type: object
      properties:
        id:
          type: string
        sender:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        members:
          type: array
          items:
            type: string
            format: uuid
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
    Attachment:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        contentType:
          type: string
    Application:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Conversation:
      type: object
      properties:
        id:
          type: string
        participants:
          type: array
          items:
            type: string
            format: uuid
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
